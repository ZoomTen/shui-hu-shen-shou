import re

def addr2offset(bank, address):
	'''
	arguments:
	-	GB bank, as an integer
	-	GB address, as an integer
	
	returns:
	-	ROM offset (as in a hex editor location) as an integer
	'''
	if bank == 0:
		# home bank
		return address
	else:
		# other banks
		return (bank * 0x4000) + (address - 0x4000)

def offset2addr(offset):
	'''
	arguments:
	-	ROM offset (as in a hex editor location) as an integer
	
	returns:
	-	tuple containing GB bank and address, both integers
	'''
	bank, addr = divmod(offset, 0x4000)
	if bank == 0:
		return (bank, addr)
	else:
		return (bank, addr + 0x4000)

def str2addr(string):
	'''
	arguments:
	-	GB address in the form of bank:address e.g. "05:56ab" or "005:56ab"
	
	returns:
	-	tuple containing GB bank and address, both integers
	'''
	s = re.match('([0-9a-fA-F]+):([0-9a-fA-F]{4})$', string)
	if s:
		return (int(s.group(1),16), int(s.group(2),16))
	
def read_symbols(symbols_string):
	'''
	arguments:
	-	newline separated symbols in the format "01:4000 HeresALabel"
		as a string
	
	returns:
	-	a dictionary which in itself contains two dictionaries:
		    1. dictionary of addresses in ROM and their corresponding label
		       in the format of {16384: "HeresALabel"}
		    2. dictionary of addresses in RAM in the same format.
	'''
	symbols = {}
	ram = {}
	for symbol in re.findall('([0-9a-fA-F]+):([0-9a-fA-F]{4})\s+(\w+)', symbols_string):
		bank, address, label = symbol
		bank = int(bank, 16)
		address = int(address, 16)
		
		if address > 0x7fff:
			ram[addr2offset(bank, address)] = label
		else:
			symbols[addr2offset(bank, address)] = label
	
	return {'rom': symbols, 'ram': ram}

def get_symbol(symbol_table, address):
	'''
	arguments:
	-	symbol table dictionary generated by read_symbols
		only one of them is used. Should be in the following format:
		    { 4096: "Label", 8192: "Otherlabel", ... }
	-	ROM offset (as in a hex editor location) as an integer
		Often resulting from .tell()
	
	returns:
	-	the corresponding symbol - or a generated label with the
		form of "unk_005_464f"
	'''
	if address in symbol_table:
		return symbol_table[address]
	else:
		return 'unk_%03x_%04x' % offset2addr(address)

# syntactic sugar
get_number = lambda src, bytes: int.from_bytes(src.read(bytes), byteorder='little')

if __name__ == '__main__':
	print('gbtool.py is a common utility library for manipulating GBC disassemblies.')
	print('It is not meant to be run as a program.')
